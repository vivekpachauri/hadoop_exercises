Lab Steps
1	View the Project
1.1	Expand the folder of the HBaseMR project in Eclipse.
1.2	Open the file StockConstants.java. Notice this class is the same one you used in the previous lab, with the addition of two new fields. The “info” field is going to represent the column family of an HBase table where the output is written to, and “date” is going to represent the date that the stock’s high price occurred.
1.3	Open the file MaxClosingPriceJob.java. Notice the Mapper class has been declared for you and extends TableMapper. What do the generics <Text, Text> represent in this class declaration? Answer: The data types of the output key and output value.
1.4	What is the data type of the input key for MaxClosingPriceMapper? Answer: ImmutableBytesWritableWhat is the data type of the input value? Answer: Result
1.5	Notice the MaxClosingPriceReducer extends TableReducer but only declares three generics. What do these three generics represent?Answer: The first two <Text> data types represent the output of the MaxClosingPriceMapper. The third <Text> data type represents the type of key that this reducer is going to output.What is the data type of the output value of MaxClosingPriceReducer? Answer: Writable
2	Define the Mapper
2.1	Right-click within the MaxClosingPriceMapper class and select Source -> Override/Implement Methods.... Select the map method.
2.2	Remove any auto-generated code from map.
2.3	Add the following static import to MaxClosingPriceJob:
import static hbasemr.StockConstants.*;
2.4	Notice the value parameter is a Result object, which represents a row in the ‘stocks’ table. Use the getColumnLatestCel l method of Result to obtain a Cell instance that contains the closing price of this stock (use the values in StockConstants for the column family and qualifier names).
2.5	Declare a new local String variable named keyString.
2.6	Use the Bytes.toString method to convert the key parameter into a String object, storing the result in keyString (you will need to invoke the get method of key to retrieve it as an array of bytes).
2.7	Use the substring method of String to extract the date from keyString, using 0 as the starting index and 10 as the ending index.
2.8	Similarly, use the substring method of String to extract the stock symbol from keyString, using 10 as the starting index and the length of keyString as the ending index.
2.9	The map method is going to output the stock symbol as the key. Use the outputKey field provided and set its value to the stock symbol.
2.10	Use the outputValue field provided and set its value to a String that consists of the date followed by the closing price. The code will look something like:
outputValue.set(date +
        Bytes.toDouble(CellUtil.cloneValue(closingPrice));
where closingPrice is the Cell variable returned from getColumnLatestCell earlier in the method.
2.11	Use context.write to output the key/value pair.
2.12	The Mapper is ready to go. Save your changes to MaxClosingPriceJob.java
3	Define the Reducer
3.1	Use Eclipse to add the reduce method signature to MaxClosingPriceReducer. Delete any auto-generated code.
3.2	The reduce method is going to iterate through the values parameter and find the highest closing price for the stock. Start by declaring a double named max within reduce to store this value, along with a String to store the date:
double max = 0.0;
String maxDate = "";
3.3	Add a loop that iterates through values.
3.4	Extract the date and closing price from the value. Recall the date is the first 10 characters, and the closing price is the remainder of the String.
3.5	If the current closing price is higher than the value of max, then set max to the current closing price and maxDate to the current date.
3.6	After the loop, instantiate a new Put object. For the row key, use the key parameter passed in to reduce .
3.7	Add max to the Put, using “info” as the column family name and “close” as the column qualifier. (Use the fields in StockConstants.)
3.8	Similarly, add maxDate to the Put in the “info” column family but using the “date” qualifier.
3.9	Write out a key/value pair where the key is the key parameter of reduce, and the value is the Put object.
3.10	Save your changes.
4	Configure the Mapper
4.1	Configure your HBase Mapper in the run method of MaxClosingPriceJob. Use the static initTableMapperJob method of TableMapReduceUtil to configure MaxClosingPriceMapper. The name of the input table is “stocks”, and instantiate a new Scan object that only retrieves the closing price.
5	Configure the Reducer
5.1	Use the static initTableReducerJob method of TableMapReduceUtil to configure MaxClosingPriceReducer. The name of the output table is “stockhighs”.
5.2	Save your changes to MaxClosingPriceJob.java.
6	Create the HBase Output Table
6.1	Create a table named ‘stockhighs’ in HBase. From the HBase shell:
hbase(main):001:0> create 'stockhighs',  {NAME => 'info', VERSIONS => 1}
7	Run the Program
7.1	Build the project to create hbasemr.jar.
7.2	Run MaxClosingPriceJob:
# cd ~/java/workspace/HBaseMR/
# yarn jar hbasemr.jar
8	Verify the Output
8.1	Use the scan operator to view the contents of ‘stockhighs’:
hbase(main):002:0> scan 'stockhighs', {COLUMNS=>['info:date', 'info:close:toDouble']}
ROW                             COLUMN+CELL
ACH                            column=info:close, timestamp=1410991397133, value=31104.72
ACH                            column=info:date, timestamp=1410991397133, value=2006-03-31
ACM                            column=info:close, timestamp=1410991397133, value=3133.77
ACM                            column=info:date, timestamp=1410991397133, value=2007-10-31
AEA                            column=info:close, timestamp=1410991397133, value=3122.9
AEA                            column=info:date, timestamp=1410991397133, value=2004-12-31
AIT                            column=info:close, timestamp=1410991397133, value=3153.25
AIT                            column=info:date, timestamp=1410991397133, value=1988-05-31
ASP                            column=info:close, timestamp=1410991397133, value=3116.62
ASP                            column=info:date, timestamp=1410991397133, value=1993-08-31
ATV                            column=info:close, timestamp=1410991397133, value=3129.49
ATV                            column=info:date, timestamp=1410991397133, value=2007-05-31
AVA                            column=info:close, timestamp=1410991397133, value=3140.75
AVA                            column=info:date, timestamp=1410991397133, value=2000-03-31
 	Result: This lab demonstrated how to use an HBase table as the input for a MapReduce job, and also how to use an HBase table as the job’s output, using the TableMapper and TableReducer classes of the HBase API.