Lab Steps
1	Define an Accumulator Class
1.1	Within the Pig project in Eclipse, add a new class to the stocksudf package named HighestClosingPriceWindow. The class should extend AccumulatorEvalFunc and the generic type should be String. This Pig UDF will return the date that a stock reached its highest closing price, along with a window of closing prices that follow its historical high.
1.2	Add a private int field named windowSize.
1.3	Add a constructor that takes in a String. Parse the String to an int and assign the value to the windowSize field.
2	Understand the Pig Script
2.1	View the contents of highclose.pig in the Pig workspace folder in Eclipse. Notice the define command defines an alias for a UDF named stockudfs.HighestClosingPriceWindow . What does the 4 represent in this alias definition? Answer: It is the size of the window, as seen in the constructor for HighestClosingPriceWindow
2.2	Notice all of the stocks are grouped by symbol, so there is a bag for each symbol. Within the nested for each, what does the sorted relation represent? Answer: The stock data will be sorted by date, which is critical when looking at the stock prices over a window of time.
2.3	Notice the nested for each invokes the HighestClosingPriceWindow for each bag of sorted stock symbols, so we should expect the output of this relation to contain a result for each unique stock symbol in daily_prices_A.csv
3	Define the accumulate Method
3.1	Here is a list of guidelines for how the UDF is invoked and what this UDF needs to accomplish:This function will be invoked one bag at a time. The bag will contain tuples that look like (symbol, date, closing_price ).The date field of the tuple is a string representation of the day for the value of closing_price, which is a float. It is the closing price of the stock for that day.You need to keep track (using a field in the class) of the highest closing price.You also need to keep track of the 3 closing prices and dates that follow the highest closing price. Use a collection in the java.util package like ArrayList or Vector to store these.The end result will be 4 dates and their corresponding 4 closing prices, with the first date in that collection containing the highest closing price that the stock ever reached in its history.
4	Define the getValue Method
4.1	The getValue method should return the 4 dates and closing prices in the following format. (The date already is in this format - you just need to put a space between each date and closing price, and a newline feed between records):
1993-10-27 16.87
1993-10-28 16.75
1993-10-29 16.75
1993-11-01 16.5
5	Define the cleanup Method
5.1	The cleanup method gets invoked between bags of stocks, so make sure within cleanup that you reset the highest closing price to 0, and clear out any values in your ArrayLists (or Vectors).
6	Run the Pig Script
6.1	From a command prompt, change directories to the Pig workspace folder and run the script:
# cd ~/java/workspace/Pig
# pig highclose.pig
Each record of the output should look like the following:
(AVA,2000-01-24 61.78
2000-01-25 46.83
2000-01-26 33.88
2000-01-27 33.75
)
 	Result: You have written a Pig UDF that implements Accumulator, which allows the Pig framework to send records to the UDF in batches, instead of reading all the records into memory and passing all of them to the UDF at one time.