Lab Steps
1	Understand the Problem
1.1	View the contents of the file /root/java/labs/Lab2.3/hortonworks.txt. It represents semi-structured content where the first string in each line is a Web page URL, followed by a comma-separated list of terms that appear on that particular Web page.
2	Prepare the Input File
2.1	Put the hortonworks.txt file into HDFS in a new folder in HDFS named inverted.
3	View the Job Class
3.1	In Eclipse, expand the InvertedIndex project folder.
3.2	Open the file IndexInvertedJob.java in the inverted package.
3.3	Notice a mapper and reducer class have been stubbed out for you, and the run and main methods are written.
4	Define the Mapper
4.1	In the map method, split the incoming line of text into words using a comma as the regular expression to separate values.
4.2	The first value incoming is the Web page URL, which is going to be the output value. For each word that follows the URL, output a key/value pair containing the word as the key and the URL as the value. Use the outputKey and outputValue fields that are already defined in IndexInverterMapper.
5	Define the Reducer
5.1	In the reduce method, use a StringBuilder instance to combine the strings in the Iterable parameter into a single String object, but have the values be separated by a comma. Hereâ€™s some code to help you:
StringBuilder builder = new StringBuilder();
for(Text value: values) {
     builder.append(value.toString()).append(",");
}
builder.deleteCharAt(builder.length() - 1);
5.2	5.2. The output key of reduce will be the same key that was input, but the output value will be the new String you created (wrapped in a outputValue field of the IndexInverterReducer class).
5.3	Save your changes to IndexInverterJob.java.
6	Run the Application
6.1	Select Run As -> Gradle Build to build the application and create the JAR.
6.2	From the ~/java/workspace/ InvertedIndex folder, execute the JAR using the inverted/ folder as the input and inverted/output as the output folder:
# yarn jar invertedindex.jar inverted/ inverted/output
7	Verify the Output
7.1	View the output file generated by your IndexInverterJob. Here is a subset of what the output should look like:
downloadhttp://hortonworks.com/community/, http://hortonworks.com/,http://hortonworks.com/download/,
downloadshttp://hortonworks.com/get-started/,http://hortonworks.com/events/,
enterprisehttp://hortonworks.com/products/hortonworksdataplatform/, http://hortonworks.com/about-us/contact-us/,http://hortonworks.com/,
feedhttp://hortonworks.com/products/, http://hortonworks.com/kb,http://hortonworks.com/resources/,
foundershttp://hortonworks.com/about-us/,http://hortonworks.com/get-started/,
hadoophttp://hortonworks.com/,http://hortonworks.com/download/, http://hortonworks.com/community/,http://hortonworks.com/kb,http://hortonworks.com/about-us/,http://hortonworks.com/resources/, http://hortonworks.com/webinars/,http://hortonworks.com/resources/,http://hortonworks.com/hadoop-rooting/,
hdphttp://hortonworks.com/about-us/contact-us/, http://hortonworks.com/download/,http://hortonworks.com/webinars/,http://hortonworks.com/events/,http://hortonworks.com/get-started/, http://hortonworks.com/hadoop-rooting/,
hortonworkshttp://hortonworks.com/about-us/, http://hortonworks.com/about-us/contact-us/, http://hortonworks.com/products/,
 	Result: The IndexInverterJob takes a set of < key ,value > pairs and inverts the index, so that each value becomes a key. You can see from the output file how this information could be used as the beginnings of a web search engine.